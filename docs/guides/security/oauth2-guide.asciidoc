---
layout: post
title: OAuth2 Guide
section: guides
toc_generate: true
---

== Overview

Support of OAuth2 for http://keycloak.jboss.org/[Keycloak], Google and Facebook on our Android, iOS, Windows and Cordova platforms.

[width="100%", frame="topbot",options="header,footer"]
|=======================================================================
|Flows |Android |iOS |JavaScript |Cordova |Windows Phone
|https://tools.ietf.org/html/rfc6749#section-4.2[Implicit grant flow]
|*-* |*-* |*-* |_soon_ |*-*

|https://tools.ietf.org/html/rfc6749#section-4.3[Refresh access tokens]
|✔ |✔ |*-* |✔ |✔

|http://tools.ietf.org/html/rfc7009#section-2[Token revocation] |*-* |✔
|*-* |*-* |*-*

|https://tools.ietf.org/html/rfc6749#section-4.3[Resource owner password
credentials grant] |*-* |_soon_ |*-* |*-* |*-*

|https://tools.ietf.org/html/rfc6749#section-4.1[Authorization Code
Grant] |✔ |✔ |*-* |✔ |✔
|=======================================================================

Below are the various GitHub repositories that are part of the OAuth2 feature in AeroGear.

[[android-overview]]
=== Android

The https://github.com/aerogear/aerogear-android-authz[AeroGear Android Authz] will give developers the ability to integrate their Android application with RESTful services secured with OAuth2.

[[cordova-overview]]
=== Apache Cordova

Our https://github.com/aerogear/aerogear-oauth2-cordova[Apache Cordova plugin] for OAuth2 supports the following platforms:

* Android
* iOS
* Windows

[[ios-overview]]
=== iOS

On iOS we do have a Swift based OAuth2 client https://github.com/aerogear/aerogear-ios-oauth2[library].

[[windows-overview]]
=== Windows

For Windows we have a client library for OAuth2 on https://github.com/aerogear/aerogear-windows-oauth2[Windows phone].

=== Demo applications

We have a demo application, called _Shoot'n Share_ for all of our supported platforms (Android, iOS, Windows and Cordova). The application allows you to upload a photo to Facebook, Google+ or a Keycloak protected backend.

The different applications can be found it the platform specific _cookbooks_:

* https://github.com/aerogear/aerogear-android-cookbook/tree/master/ShootAndShare[Android Shoot'n Share]
* https://github.com/aerogear/aerogear-ios-cookbook/tree/master/Shoot[iOS Shoot'n Share]
* https://github.com/aerogear/aerogear-windows-cookbook/blob/master/Shoot/README.md[Windows Shoot'n Share]
* https://github.com/aerogear/aerogear-cordova-cookbook/tree/master/Shoot[Cordova Shoot'n Share]

The Keycloak protected backend application is a simple Java EE / JAX-RS based application. The source is located https://github.com/aerogear/aerogear-backend-cookbook/tree/master/Shoot[here].

== Requirements

=== Server side

* http://www.oracle.com/technetwork/java/javase/downloads/index.html[Java 7]
* http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.tar.gz[WildFly 8.2.0.Final]
* http://sourceforge.net/projects/keycloak/files/1.1.0.Final/[Keycloak 1.1.0.Final]

=== Android

* http://www.oracle.com/technetwork/java/javase/downloads/index.html[Java 7]
* http://www.gradle.org/[Gradle 2.2.1]
* https://developer.android.com/sdk/index.html[Android SDK] with http://developer.android.com/tools/revisions/platforms.html[platform version 21]

=== Apache Cordova

* https://nodejs.org/[Node.js] and https://www.npmjs.com/[npm]
* http://cordova.apache.org/docs/en/4.0.0/guide_cli_index.md.html[Cordova installed]

=== iOS

* http://guides.cocoapods.org/using/getting-started.html#getting-started[Cocoapods 0.36.0.x]
* https://developer.apple.com/xcode/downloads/[XCode 6.2]

=== Windows Phone

* https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx[Visual Studio 2013]
* https://docs.nuget.org/consume/installing-nuget[nuget]

== Before you get started

The OAuth2 examples described in this guide require some previous setup to make `Keycloak`, `Facebook` and `Google` work. Please follow the steps listed below.

[[Google]]
=== Google Account Setup

. First, you must authenticate with Google. You will need a Google Account
for this. Now open the http://console.developer.google.com[Google
Console].

. If you haven't created a project, click "Create Project" and give the
new project a name:
+
image:/docs/guides/security/img/google-console-1.png[Google Console - Create Project]
+
. Now you enable the Drive API. To do that, navigate to APIs &
auth > APIs and scroll down to the Drive API item, which you need to
turn on:
+
image:/docs/guides/security/img/google-console-2.png[Google Console - Enable APIs]
+
. Create new credentials to access your Drive accounts from
the app. Go to APIs & auth > Credentials and inside OAuth area click the
blue `Create new Client ID` button.
+
image:/docs/guides/security/img/google-console-3.png[Google Console - Create client ID]
+
. You will need to create a _consent screen_. Click the blue
`Configure consent screen`
+
image::/docs/guides/security/img/google-console-4.png[Google Console - Consent screen]
+
. Afterwards, click save and you will return to the Client ID. Select `Installed application` and `iOS` and fill in your `bundle ID`, these settings will work for Android and iOS:
+
image:/docs/guides/security/img/google-console-5.png[Google Console - Create client ID]
+
. On the last screen we finally get to see the actual value of the
generated `client id`, `secret id` and `redirect uris`, which you will
use later:
+
image:/docs/guides/security/img/google-console-6.png[Google Console - Credentials]

[[Facebook]]
=== Facebook Account Setup

. First you must have a Facebook account. Now open the
https://developers.facebook.com/[Facebook Developers] page and select
`Apps` -> `Add a New App`
+
image:/docs/guides/security/img/facebook-1.png[Facebook - Add App]
+
. Create a new app and select `Website` as platform
+
image:/docs/guides/security/img/facebook-2.png[Facebook - Select platform]
+
. Click `Skip and Create App ID`
+
image:/docs/guides/security/img/facebook-3.png[Facebook - Skip and Create App ID]
+
. Setup a Display Name and Namespace and select a category, then click
`Create App ID`
+
image:/docs/guides/security/img/facebook-4.png[Facebook - Choice app category]
+
. Fill out the captcha

. Now on the Dashboard view. Make a note of your `App ID` and
`App Secret`.
+
image:/docs/guides/security/img/facebook-5.png[Facebook - Dashboard]
+
. Select `Settings` from the sidebar and then the `Advanced` tab
+
image:/docs/guides/security/img/facebook-6.png[Facebook - Advanced Tab]
+
. Scroll to Security and enable `Embedded browser OAuth Login` and make
`https://localhost/` your redirectURI
+
image:/docs/guides/security/img/facebook-7.png[Facebook - Enable OAuth]
+
Now save your changes and Facebook is ready to go.

[[Keycloak]]
=== Keycloak

. Download Keycloak Appliance Distribution version http://sourceforge.net/projects/keycloak/files/1.1.0.Final/[1.1.0.Final]
. Start the server
+
[source,bash]
$ KEYCLOAK_APPLIANCE_HOME/keycloak/bin/standalone.sh -b 0.0.0.0
+
A quick screencast can be seen https://asciinema.org/a/16876[here].
. Open http://localhost:8080/auth/admin/index.html[http://localhost:8080/auth/admin/index.html]
+
image:/docs/guides/security/img/keycloak-1.jpg[Keycloak - Login page]
+
. Login using *Username*: _admin_ / *Password*: _admin_
. Insert a new password
. Click on `Add realm`
+
image:/docs/guides/security/img/keycloak-2.jpg[Keycloak - Realm configuration]
+
. Import the https://raw.githubusercontent.com/aerogear/aerogear-backend-cookbook/master/Shoot/configuration/shoot-realm.json[realm configuration file]

== Getting started

AeroGear integrates with several OAuth2 providers. If you already have an existing mobile application, please select a platform and follow one of the steps below.

All the examples described here are based on our demo application, called Shoot'nShare.

=== Server side deployment

Most of the examples do not require an application server to work, but if you're planning to use http://keycloak.jboss.org/[Keycloak] as security provider, http://wildfly.org/[WildFly] is required.

Assuming that all the instructions described link:#Keycloak[here] were properly followed, now deploy our example server:

[source]
----
$ git clone git@github.com:aerogear/aerogear-backend-cookbook.git && cd aerogear-backend-cookbook
$ cd Shoot
$ mvn clean install
$ mvn wildfly:deploy
----

Keep in mind that the example server is not required to connect with http://keycloak.jboss.org/[Keycloak]. Shoot'nShare server only showcase an end-to-end security integration in real life and display the uploaded photos.

[[android-getting-started]]
=== Android

To download one of our examples, check our https://github.com/aerogear/aerogear-android-cookbook/releases[cookbooks].

. Adding AeroGear to the project
+
[source]
.https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/build.gradle[build.gradle]
----
compile ('org.jboss.aerogear:aerogear-android-authz:2.0.0') {
    exclude module : 'compatibility-v4'
    transitive = true
}
----
+
. Add the `android.permission.INTERNET` permission:
+
[source,xml]
.https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/AndroidManifest.xml[AndroidManifest.xml]
----
<uses-permission android:name="android.permission.INTERNET"/>
----
+
. Then add the following entries to `AndroidManifest.xml` inside the `<application>` tag:
+
[source,xml]
.https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/AndroidManifest.xml[AndroidManifest.xml]
----
<application>
    <service android:name="org.jboss.aerogear.android.authorization.oauth2.OAuth2AuthzService"/>
</application>
----
+
. Initialise the `AuthorizationManager`.
+
First create a helper class and add these lines of code:
+
++++
<ul class="nav nav-tabs nav-snippets">
  <li class="active"><a href="#keycloak-oauth2-android-auth-manager"><i class="fa fa-shield"></i> Keycloak</a></li>
  <li><a href="#facebook-oauth2-android-auth-manager" title="Facebook"><i class="fa fa-facebook"></i> Facebook</a></li>
  <li><a href="#google-oauth2-android-auth-manager" title="Google"><i class="fa fa-google"></i> Google</a></li>
</ul>
<script defer src="/js/code-snippets.js"></script>

<div id="keycloak-oauth2-android-auth-manager" class="snippet-oauth2-android-auth-manager">
</br>
<a href="https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/java/org/jboss/aerogear/android/cookbook/shootandshare/util/KeycloakHelper.java"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
AuthorizationManager.config("KeyCloakAuthz", OAuth2AuthorizationConfiguration.class)
        .setBaseURL(new URL("http://localhost:8080/auth"))
        .setClientId("shoot-third-party")
        .setAuthzEndpoint("/realms/shoot-realm/tokens/login")
        .setAccessTokenEndpoint("/realms/shoot-realm/tokens/access/codes")
        .setRefreshEndpoint("/realms/shoot-realm/tokens/refresh")
        .setAccountId("keycloak-token")
        .setRedirectURL("http://oauth2callback")
        .asModule();
</pre>
</div>

<div id="facebook-oauth2-android-auth-manager" class="snippet-oauth2-android-auth-manager" style="display: none">
</br>
<a href="https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/java/org/jboss/aerogear/android/cookbook/shootandshare/util/FacebookHelper.java"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
AuthorizationManager.config("FacebookOAuth", OAuth2AuthorizationConfiguration.class)
        .setBaseURL(new URL("https://"))
        .setClientId("replace me")
        .setClientSecret("replace me")
        .setAuthzEndpoint("www.facebook.com/dialog/oauth")
        .setAccessTokenEndpoint("graph.facebook.com/oauth/access_token")
        .setAccountId("facebook-token")
        .setRedirectURL("https://localhost/")
        .setRefreshEndpoint("graph.facebook.com/oauth/access_token")
        .addAdditionalAccessParam(Pair.create("response_type", "code"))
        .setScopes(Arrays.asList("photo_upload, publish_actions"))
        .asModule();
</pre>
</div>

<div id="google-oauth2-android-auth-manager" class="snippet-oauth2-android-auth-manager" style="display: none">
</br>
<a href="https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/java/org/jboss/aerogear/android/cookbook/shootandshare/util/GooglePlusHelper.java"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
AuthorizationManager.config("GoogleDriveAuthz", OAuth2AuthorizationConfiguration.class)
        .setBaseURL(new URL("https://accounts.google.com"))
        .setClientId("replace me")
        .setClientSecret("replace me")
        .setAuthzEndpoint("/o/oauth2/auth")
        .setAccessTokenEndpoint("/o/oauth2/token")
        .setRefreshEndpoint("/o/oauth2/token")
        .setAccountId("google-token")
        .setRedirectURL("http://localhost")
        .setScopes(Arrays.asList("https://www.googleapis.com/auth/drive"))
        .addAdditionalAuthorizationParam(Pair.create("access_type", "offline"))
        .asModule();
</pre>
</div>
++++
+
Please make sure to use the proper `client ID` and `client secret` for your application.
+
. Create a model class
+
The Android library will automatically marshall the HTTP request payload from OAuth2 providers. For more detailed information, please visit the link:/docs/guides/aerogear-android/pipe[Android documentation].
+
[source,java]
.https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/java/org/jboss/aerogear/android/cookbook/shootandshare/model/PhotoHolder.java[PhotoHolder - copy & paste]
----
public class PhotoHolder {

    @RecordId
    private String id = null;

    private String title, message;
    private File image;
    //getters and setters
}
----
+
. PipeManager configuration
+
Now you can configure the link:/docs/guides/aerogear-android/pipe[PipeManager] to make use of the `AuthorizationManager` previously initialised.
+
++++
<ul class="nav nav-tabs nav-snippets">
  <li class="active"><a href="#keycloak-oauth2-pipe-manager"><i class="fa fa-shield"></i> Keycloak</a></li>
  <li><a href="#facebook-oauth2-pipe-manager" title="Facebook"><i class="fa fa-facebook"></i> Facebook</a></li>
  <li><a href="#google-oauth2-pipe-manager" title="Google"><i class="fa fa-google"></i> Google</a></li>
</ul>
<script defer src="/js/code-snippets.js"></script>

<div id="keycloak-oauth2-pipe-manager" class="snippet-oauth2-pipe-manager">
</br>
<a href="https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/java/org/jboss/aerogear/android/cookbook/shootandshare/util/KeycloakHelper.java"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
PipeManager.config("kc-upload", RestfulPipeConfiguration.class)
        .module(AuthorizationManager.getModule("KeyCloakAuthz"))
        .withUrl(new URL("http://localhost:8080/shoot/rest/photos"))
        .requestBuilder(new MultipartRequestBuilder())
        .forClass(PhotoHolder.class);
</pre>
</div>

<div id="facebook-oauth2-pipe-manager" class="snippet-oauth2-pipe-manager" style="display: none">
</br>
<a href="https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/java/org/jboss/aerogear/android/cookbook/shootandshare/util/FacebookHelper.java"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
PipeManager.config("fb-upload", RestfulPipeConfiguration.class)
        .module(AuthorizationManager.getModule("FacebookOAuth"))
        .withUrl(new URL("https://graph.facebook.com/me/photos"))
        .requestBuilder( new MultipartRequestBuilder())
        .forClass(PhotoHolder.class);
</pre>
</div>

<div id="google-oauth2-pipe-manager" class="snippet-oauth2-pipe-manager" style="display: none">
</br>
<a href="https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/java/org/jboss/aerogear/android/cookbook/shootandshare/util/GooglePlusHelper.java"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
PipeManager.config("gp-upload", RestfulPipeConfiguration.class)
        .module(AuthorizationManager.getModule(GoogleDriveAuthz))
        .withUrl(new URL("https://www.googleapis.com/upload/drive/v2/files?uploadType=multipart"))
        .requestBuilder(new GoogleDriveFileUploadRequestBuilder())
        .forClass(PhotoHolder.class);
</pre>
</div>
++++
+
Please make sure to use the proper `client ID` and `client secret` for your application.
+
. Request access
+
Finally, you need to request access to the OAuth2 provider. Make sure to create a new method for the helper class and inform the module name. The possible values are: `KeyCloakAuthz`, `FacebookOAuth` and `GoogleDriveAuthz`.
+
[source,java]
.https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/java/org/jboss/aerogear/android/cookbook/shootandshare/util/KeycloakHelper.java[Copy & paste]
----
final AuthzModule authzModule = AuthorizationManager.getModule(<module name>);

authzModule.requestAccess(activity, new Callback<String>() {
    @Override
    public void onSuccess(String s) {
        callback.onSuccess(s);
    }

    @Override
    public void onFailure(Exception e) {
        if (!e.getMessage().matches(OAuthWebViewDialog.OAuthReceiver.DISMISS_ERROR)) {
            authzModule.deleteAccount();
        }
        callback.onFailure(e);
    }
});
----

. You are legendary!
+
Congratulations, we're done here! You followed all the steps to heaven and now it's time to celebrate.

[[cordova-getting-started]]
=== Apache Cordova

To download one of our examples, check our https://github.com/aerogear/aerogear-cordova-cookbook[cookbooks].

. Adding AeroGear to the project
+
[source]
.https://github.com/aerogear/aerogear-cordova-cookbook/blob/master/Shoot/config.xml[config.xml]
----
$ cordova plugin add org.jboss.aerogear.cordova.oauth2
----

. Configure Info.plist file
+
Add the `CFBundleURLTypes` key or skip this step if you have no plans to connect with Facebook or deploy on iOS.
+
[source]
.https://github.com/aerogear/aerogear-ios-cookbook/blob/master/Shoot/Shoot/Info.plist[Info.plist]
----
<key>CFBundleURLTypes</key>
<array>
    <dict>
        <key>CFBundleURLSchemes</key>
        <array>
            <string>org.aerogear.Shoot</string>
            <string>fbYYY</string>
        </array>
    </dict>
</array>
----


. Add the OAuth2 provider configuration
+
++++
<ul class="nav nav-tabs nav-snippets">
  <li class="active"><a href="#keycloak-oauth2-cordova-config"><i class="fa fa-shield"></i> Keycloak</a></li>
  <li><a href="#facebook-oauth2-cordova-config" title="Facebook"><i class="fa fa-facebook"></i> Facebook</a></li>
  <li><a href="#google-oauth2-cordova-config" title="Google"><i class="fa fa-google"></i> Google</a></li>
</ul>
<script defer src="/js/code-snippets.js"></script>

<div id="keycloak-oauth2-cordova-config" class="snippet-oauth2-cordova-config">
</br>
<a href="https://github.com/aerogear/aerogear-cordova-cookbook/blob/master/Shoot/www/js/app.js"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
oauth2.addKeycloak({
  name: 'keycloak',
  settings: {
    base: '<location of keycloak server e.g. http://192.168.0.12:8080/auth>',
    //when you use the shoot and share backend these do not need to change
    clientId: 'shoot-third-party',
    realm: 'shoot-realm'
  }
});
</pre>
</div>

<div id="facebook-oauth2-cordova-config" class="snippet-oauth2-cordova-config" style="display: none">
</br>
<a href="https://github.com/aerogear/aerogear-cordova-cookbook/blob/master/Shoot/www/js/app.js"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
oauth2.addFacebook({
  name: 'facebook',
  settings: {
    //On iOS, be sure to also update the <project_name>-Info.plist file with the clientId
    clientId: '<your client id goes here>',
    clientSecret: '<your client secret goes here>',
    scopes: 'photo_upload, publish_actions'
  }
});

</pre>
</div>

<div id="google-oauth2-cordova-config" class="snippet-oauth2-cordova-config" style="display: none">
</br>
<a href="https://github.com/aerogear/aerogear-cordova-cookbook/blob/master/Shoot/www/js/app.js"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
oauth2.addGoogle({
  name: 'gplus',
  settings: {
    //replace with your own if you want to...
    clientId: '<your client secret goes here.apps.googleusercontent.com>',
    scopes: 'https://www.googleapis.com/auth/drive'
  }
});
</pre>
</div>
++++
+
Please make sure to use the proper `client ID` and `client secret` for your application.

. Deploy
+
++++
<ul class="nav nav-tabs nav-snippets">
  <li class="active"><a href="#android-oauth2-cordova-deploy"><i class="fa fa-android"></i> Android</a></li>
  <li><a href="#ios-oauth2-cordova-deploy" title="Facebook"><i class="fa fa-apple"></i> iOS</a></li>
</ul>
<script defer src="/js/code-snippets.js"></script>

<div id="android-oauth2-cordova-deploy" class="snippet-oauth2-cordova-deploy">
<pre class="highlight">
$ cordova run android
</pre>
</div>

<div id="ios-oauth2-cordova-deploy" class="snippet-oauth2-cordova-deploy" style="display: none">
<pre class="highlight">
$ cordova run ios
</pre>
</div>
++++

. You are legendary!
+
Congratulations, we're done here! You followed all the steps to heaven and now it's time to celebrate.

[[ios-getting-started]]
=== iOS

To download one of our examples, check our https://github.com/aerogear/aerogear-ios-cookbook/releases/[cookbooks].

. Adding AeroGear to the project
+
[source]
.https://github.com/aerogear/aerogear-ios-cookbook/blob/master/Shoot/Podfile[Podfile]
----
pod 'AeroGearHttp', '0.2.0'
pod 'AeroGearOAuth2', '0.2.1'
----

. Configure Info.plist file
+
Add the `CFBundleURLTypes` key or skip this step if you have no plans to connect with Facebook.
+
[source]
.https://github.com/aerogear/aerogear-ios-cookbook/blob/master/Shoot/Shoot/Info.plist[Info.plist]
----
<key>CFBundleURLTypes</key>
<array>
    <dict>
        <key>CFBundleURLSchemes</key>
        <array>
            <string>org.aerogear.Shoot</string>
            <string>fbYYY</string>
        </array>
    </dict>
</array>
----

. Create a `ViewController` class and instantiate the `Http` class
+
For more detailed information about the HTTP module, please visit the link:/docs/guides/aerogear-ios-2.X/HttpLib/[iOS documentation].
+
[source]
.https://github.com/aerogear/aerogear-ios-cookbook/blob/master/Shoot/Shoot/ViewController.swift[ViewController.swift]
----
var Http = Http()
----

. Initialise the OAuth2 provider configuration
+
++++
<ul class="nav nav-tabs nav-snippets">
  <li class="active"><a href="#keycloak-oauth2-ios-config"><i class="fa fa-shield"></i> Keycloak</a></li>
  <li><a href="#facebook-oauth2-ios-config" title="Facebook"><i class="fa fa-facebook"></i> Facebook</a></li>
  <li><a href="#google-oauth2-ios-config" title="Google"><i class="fa fa-google"></i> Google</a></li>
</ul>
<script defer src="/js/code-snippets.js"></script>

<div id="keycloak-oauth2-ios-config" class="snippet-oauth2-ios-config">
</br>
<a href="https://github.com/aerogear/aerogear-ios-cookbook/blob/master/Shoot/Shoot/ViewController.swift"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
let keycloakHost = "http://localhost:8080"
let keycloakConfig = KeycloakConfig(
    clientId: "shoot-third-party",
    host: keycloakHost,
    realm: "shoot-realm")
</pre>
</div>

<div id="facebook-oauth2-ios-config" class="snippet-oauth2-ios-config" style="display: none">
</br>
<a href="https://github.com/aerogear/aerogear-ios-cookbook/blob/master/Shoot/Shoot/ViewController.swift"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
let facebookConfig = FacebookConfig(
    clientId: "YYY",
    clientSecret: "XXX",
    scopes:["photo_upload, publish_actions"])
</pre>
</div>

<div id="google-oauth2-ios-config" class="snippet-oauth2-ios-config" style="display: none">
</br>
<a href="https://github.com/aerogear/aerogear-ios-cookbook/blob/master/Shoot/Shoot/ViewController.swift"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
let googleConfig = GoogleConfig(
    clientId: "<your client secret goes here.apps.googleusercontent.com>",
    scopes:["https://www.googleapis.com/auth/drive"])
</pre>
</div>
++++
+
Please make sure to use the proper `client ID` and `client secret` for your application.

. Add the OAuth2 configuration to the `AccountManager`
+
++++
<ul class="nav nav-tabs nav-snippets">
  <li class="active"><a href="#keycloak-oauth2-ios-manager"><i class="fa fa-shield"></i> Keycloak</a></li>
  <li><a href="#facebook-oauth2-ios-manager" title="Facebook"><i class="fa fa-facebook"></i> Facebook</a></li>
  <li><a href="#google-oauth2-ios-manager" title="Google"><i class="fa fa-google"></i> Google</a></li>
</ul>
<script defer src="/js/code-snippets.js"></script>

<div id="keycloak-oauth2-ios-manager" class="snippet-oauth2-ios-manager">
</br>
<a href="https://github.com/aerogear/aerogear-ios-cookbook/blob/master/Shoot/Shoot/ViewController.swift"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
let keycloakModule = AccountManager.addKeycloakAccount(keycloakConfig)
</pre>
</div>

<div id="facebook-oauth2-ios-manager" class="snippet-oauth2-ios-manager" style="display: none">
</br>
<a href="https://github.com/aerogear/aerogear-ios-cookbook/blob/master/Shoot/Shoot/ViewController.swift"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
let facebookModule =  AccountManager.addFacebookAccount(facebookConfig)
</pre>
</div>

<div id="google-oauth2-ios-manager" class="snippet-oauth2-ios-manager" style="display: none">
</br>
<a href="https://github.com/aerogear/aerogear-ios-cookbook/blob/master/Shoot/Shoot/ViewController.swift"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
let googleModule = AccountManager.addGoogleAccount(googleConfig)
</pre>
</div>

++++

. Inject the OAuth2 module into HTTP object
+
++++
<ul class="nav nav-tabs nav-snippets">
  <li class="active"><a href="#keycloak-oauth2-ios-inject"><i class="fa fa-shield"></i> Keycloak</a></li>
  <li><a href="#facebook-oauth2-ios-inject" title="Facebook"><i class="fa fa-facebook"></i> Facebook</a></li>
  <li><a href="#google-oauth2-ios-inject" title="Google"><i class="fa fa-google"></i> Google</a></li>
</ul>
<script defer src="/js/code-snippets.js"></script>

<div id="keycloak-oauth2-ios-inject" class="snippet-oauth2-ios-inject">
</br>
<a href="https://github.com/aerogear/aerogear-ios-cookbook/blob/master/Shoot/Shoot/ViewController.swift"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
self.http.authzModule = keycloakModule
</pre>
</div>

<div id="facebook-oauth2-ios-inject" class="snippet-oauth2-ios-inject" style="display: none">
</br>
<a href="https://github.com/aerogear/aerogear-ios-cookbook/blob/master/Shoot/Shoot/ViewController.swift"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
self.http.authzModule = facebookModule
</pre>
</div>

<div id="google-oauth2-ios-inject" class="snippet-oauth2-ios-inject" style="display: none">
</br>
<a href="https://github.com/aerogear/aerogear-ios-cookbook/blob/master/Shoot/Shoot/ViewController.swift"><i class="fa fa-paperclip"></i> Copy & paste</a>
<pre class="highlight">
self.http.authzModule = googleModule
</pre>
</div>
++++

. Create a method to send the HTTP request
+
Finally, send an HTTP request to make sure that everything is fine. Make sure to create a separate method for this.
+
[source]
.https://github.com/aerogear/aerogear-ios-cookbook/blob/master/Shoot/Shoot/ViewController.swift[Copy & paste]
----
func performUpload(url: String, parameters: [String: AnyObject]?) {
    self.http.POST(url, parameters: parameters, completionHandler: {(response, error) in
        if (error != nil) {
            self.presentAlert("Error", message: error!.localizedDescription)
        } else {
            self.presentAlert("Success", message: "Successfully uploaded!")
        }
    })
}
----

. You are legendary!
+
Congratulations, we're done here! You followed all the steps to heaven and now it's time to celebrate.

[[windows-getting-started]]
=== Windows Phone

To download one of our examples, check https://github.com/aerogear/aerogear-windows-oauth2[the sources].

. Application configuration
+
Go to Visual Studio and open `Package.appxmanifest` go to `Declarations` add a protocol and set the bundle id you picked on the google console.
+
image:/docs/guides/security/img/windows-protocol-config.png[Protocol configuration]
+
Next step is setting up the account in code, replace the `<google-client-id>` with your google `client id`.

. Initialise the OAuth2 provider configuration
+
[source]
----
var config = await GoogleConfig.Create(
    "<google-client-id>",
    new List<string>(new string[] { "https://www.googleapis.com/auth/drive" }),
    "google"
);
----

. Add the OAuth2 configuration to the `AccountManager`
+
[source]
----
var googleModule = await AccountManager.AddAccount(config);
----

. Request access
+
[source]
----
if (await module.RequestAccessAndContinue())
{
    Upload(module);
}
----
+
if the result is `true` the app will not be suspended and we can for instance upload to Google Drive, like in this example. Otherwise the app will be suspended and an authentication dialog will appear.
+
To handle the continuation event, include http://msdn.microsoft.com/en-us/library/dn631755.aspx[continuation manager] in you app. Or implement everything by yourself:
+
[source]
----
protected async override void OnActivated(IActivatedEventArgs args)
{
    if (args.Kind == ActivationKind.WebAuthenticationBrokerContinuation)
    {
        //get a reference to the page as IWebAuthenticationContinuable
        var wabPage = rootFrame.Content as IWebAuthenticationContinuable;
        wabPage.ContinueWebAuthentication(args as WebAuthenticationBrokerContinuationEventArgs);
    }
...
----
+
The page will have to implement the `IWebAuthenticationContinuable` interface like this:
+
[source]
----
async void IWebAuthenticationContinuable.ContinueWebAuthentication(WebAuthenticationBrokerContinuationEventArgs args)
{
    Upload(await AccountManager.ParseContinuationEvent(args));
}
----
+
This will parse the `ContinuationEvent` and save the token from the OAuth provider (in this case Google) to the device. So the next time user don't  need to authenticate again.
+
In the upload method, make use of `AuthzWebRequest`, a special WebRequest that will take care of adding the authentication headers.
+
[source]
----
public async void Upload(OAuth2Module module)
{
    var request = AuthzWebRequest.Create("https://www.googleapis.com/upload/drive/v2/files", module);
    request.Method = "POST";

    using (var postStream = await Task<Stream>.Factory.FromAsync(request.BeginGetRequestStream, request.EndGetRequestStream, request))
...
----

. You are legendary!
+
Congratulations, we're done here! You followed all the steps to heaven and now it's time to celebrate.

== What's next?

We're constantly improving our API, based on the the open source community, if you think something is missing, file a https://issues.jboss.org/browse/agsec[Jira].

Want to learn more? Go back to link:/getstarted/guides/[our guides].

== Asking for help

Security can be tricky sometimes, due to numerous misunderstandings and subtle details behind it, so feel free to reach out to us if you have any link:/community/#contact[questions] or want to provide honest feedback.
