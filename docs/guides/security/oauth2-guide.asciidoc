---
layout: post
title: OAuth2 Guide
section: guides
toc_generate: true
---

== Overview

Support of OAuth2 for http://keycloak.jboss.org/[Keycloak], Google and Facebook on our Android, iOS, Windows and Cordova platforms.

[width="100%", frame="topbot",options="header,footer"]
|=======================================================================
|Flows |Android |iOS |JavaScript |Cordova |Windows Phone
|https://tools.ietf.org/html/rfc6749#section-4.2[Implicit grant flow]
|*-* |*-* |*-* |_soon_ |*-*

|https://tools.ietf.org/html/rfc6749#section-4.3[Refresh access tokens]
|✔ |✔ |*-* |✔ |✔

|http://tools.ietf.org/html/rfc7009#section-2[Token revocation] |*-* |✔
|*-* |*-* |*-*

|https://tools.ietf.org/html/rfc6749#section-4.3[Resource owner password
credentials grant] |*-* |_soon_ |*-* |*-* |*-*

|https://tools.ietf.org/html/rfc6749#section-4.1[Authorization Code
Grant] |✔ |✔ |*-* |✔ |✔
|=======================================================================

Below are the various GitHub repositories that are part of the OAuth2 feature in AeroGear.

=== Android

The https://github.com/aerogear/aerogear-android-authz[AeroGear Android Authz] will give developers the ability to integrate their Android application with RESTful services secured with OAuth2.

=== iOS

On iOS we do have a Swift based OAuth2 client https://github.com/aerogear/aerogear-ios-oauth2[library].

=== Windows

For Windows we have a client library for OAuth2 on https://github.com/aerogear/aerogear-windows-oauth2[Windows phone].

=== Apache Cordova

Our https://github.com/aerogear/aerogear-oauth2-cordova[Apache Cordova plugin] for OAuth2 supports the following platforms:

* Android
* iOS
* Windows

=== Demo applications

We have a demo application, called _Shoot'n Share_ for all of our supported platforms (Android, iOS, Windows and Cordova). The application allows you to upload a photo to Facebook, Google+ or a Keycloak protected backend.

The different applications can be found it the platform specific _cookbooks_:

* https://github.com/aerogear/aerogear-android-cookbook/tree/master/ShootAndShare[Android Shoot'n Share]
* https://github.com/aerogear/aerogear-ios-cookbook/tree/master/Shoot[iOS Shoot'n Share]
* https://github.com/aerogear/aerogear-windows-cookbook/blob/master/Shoot/README.md[Windows Shoot'n Share]
* https://github.com/aerogear/aerogear-cordova-cookbook/tree/master/Shoot[Cordova Shoot'n Share]

The Keycloak protected backend application is a simple Java EE / JAX-RS based application. The source is located https://github.com/aerogear/aerogear-backend-cookbook/tree/master/Shoot[here].

== Requirements
=== Android
=== Apache Cordova
=== iOS
=== Windows Phone

== Before you get started

[[Google]]
=== Google Account Setup

. First, you must authenticate with Google. You will need a Google Account
for this. Now open the http://console.developer.google.com[Google
Console].

. If you haven't created a project, click "Create Project" and give the
new project a name:
+
image:/docs/guides/security/img/google-console-1.png[Google Console - Create Project]
+
. Now you enable the Drive API. To do that, navigate to APIs &
auth > APIs and scroll down to the Drive API item, which you need to
turn on:
+
image:/docs/guides/security/img/google-console-2.png[Google Console - Enable APIs]
+
. Create new credentials to access your Drive accounts from
the app. Go to APIs & auth > Credentials and inside OAuth area click the
blue `Create new Client ID` button.
+
image:/docs/guides/security/img/google-console-3.png[Google Console - Create client ID]
+
. You will need to create a _consent screen_. Click the blue
`Configure consent screen`
+
image::/docs/guides/security/img/google-console-4.png[Google Console - Consent screen]
+
. Afterwards, click save and you will return to the Client ID. Select `Installed application` and `iOS` and fill in your `bundle ID`, these settings will work for Android and iOS:
+
image:/docs/guides/security/img/google-console-5.png[Google Console - Create client ID]
+
. On the last screen we finally get to see the actual value of the
generated `client id`, `secret id` and `redirect uris`, which you will
use later:
+
image:/docs/guides/security/img/google-console-6.png[Google Console - Credentials]

[[Facebook]]
=== Facebook Account Setup

. First you must have a Facebook account. Now open the
https://developers.facebook.com/[Facebook Developers] page and select
`Apps` -> `Add a New App`
+
image:/docs/guides/security/img/facebook-1.png[Facebook - Add App]
+
. Create a new app and select `Website` as platform
+
image:/docs/guides/security/img/facebook-2.png[Facebook - Select platform]
+
. Click `Skip and Create App ID`
+
image:/docs/guides/security/img/facebook-3.png[Facebook - Skip and Create App ID]
+
. Setup a Display Name and Namespace and select a category, then click
`Create App ID`
+
image:/docs/guides/security/img/facebook-4.png[Facebook - Choice app category]
+
. Fill out the captcha

. Now on the Dashboard view. Make a note of your `App ID` and
`App Secret`.
+
image:/docs/guides/security/img/facebook-5.png[Facebook - Dashboard]
+
. Select `Settings` from the sidebar and then the `Advanced` tab
+
image:/docs/guides/security/img/facebook-6.png[Facebook - Advanced Tab]
+
. Scroll to Security and enable `Embedded browser OAuth Login` and make
`https://localhost/` your redirectURI
+
image:/docs/guides/security/img/facebook-7.png[Facebook - Enable OAuth]
+
Now save your changes and Facebook is ready to go.

[[Keycloak]]
=== Keycloak

. Download Keycloak Appliance Distribution version http://sourceforge.net/projects/keycloak/files/1.1.0.Final/[1.1.0.Final]
. Start the server
+
[source,bash]
$ KEYCLOAK_APPLIANCE_HOME/keycloak/bin/standalone.sh -b 0.0.0.0
+
A quick screencast can be seen https://asciinema.org/a/16876[here].
. Open http://localhost:8080/auth/admin/index.html[http://localhost:8080/auth/admin/index.html]
+
image:/docs/guides/security/img/keycloak-1.jpg[Keycloak - Login page]
+
. Login using *Username*: _admin_ / *Password*: _admin_
. Insert a new password
. Click on `Add realm`
+
image:/docs/guides/security/img/keycloak-2.jpg[Keycloak - Realm configuration]
+
. Import the https://raw.githubusercontent.com/aerogear/aerogear-backend-cookbook/master/Shoot/configuration/shoot-realm.json[realm configuration file]

== Getting started

AeroGear integrates with several OAuth2 providers. To give a try, download one of our https://github.com/aerogear/aerogear-android-cookbook/releases[cookbooks]. If you already have an existing mobile application, please select a platform and follow one of the steps below.

=== Server side deployment

Instructions about how to deploy the shoot server

=== Android

. Adding AeroGear to the project
+
[source]
.https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/build.gradle[build.gradle]
----
compile ('org.jboss.aerogear:aerogear-android-authz:2.0.0') {
    exclude module : 'compatibility-v4'
    transitive = true
}
----
+
. Add the `android.permission.INTERNET` permission:
+
[source,xml]
.https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/AndroidManifest.xml[AndroidManifest.xml]
----
<uses-permission android:name="android.permission.INTERNET"/>
----
+
. Then add the following entries to `AndroidManifest.xml` inside the `<application>` tag:
+
[source,xml]
.https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/AndroidManifest.xml[AndroidManifest.xml]
----
<application>
    <service android:name="org.jboss.aerogear.android.authorization.oauth2.OAuth2AuthzService"/>
</application>
----
+
. Initialise the `AuthorizationManager`.
+
First create a helper class and add these lines of code:
+
++++
<ul class="nav nav-tabs nav-snippets">
  <li class="active"><a href="#keycloak"><i class="fa fa-shield"></i> Keycloak</a></li>
  <li><a href="#facebook" title="Facebook"><i class="fa fa-facebook"></i> Facebook</a></li>
  <li><a href="#google" title="Google"><i class="fa fa-google"></i> Google</a></li>
</ul>
<script defer src="/js/code-snippets.js"></script>

<div id="keycloak" class="snippet-oauth2">
</br>
<a href="https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/java/org/jboss/aerogear/android/cookbook/shootandshare/util/KeycloakHelper.java">Copy & paste</a>
<pre class="highlight">
AuthorizationManager.config("KeyCloakAuthz", OAuth2AuthorizationConfiguration.class)
        .setBaseURL(new URL("http://localhost:8080/auth"))
        .setClientId("shoot-third-party")
        .setAuthzEndpoint("/realms/shoot-realm/tokens/login")
        .setAccessTokenEndpoint("/realms/shoot-realm/tokens/access/codes")
        .setRefreshEndpoint("/realms/shoot-realm/tokens/refresh")
        .setAccountId("keycloak-token")
        .setRedirectURL("http://oauth2callback")
        .asModule();
</pre>
</div>

<div id="facebook" class="snippet-oauth2" style="display: none">
</br>
<a href="https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/java/org/jboss/aerogear/android/cookbook/shootandshare/util/FacebookHelper.java">Copy & paste</a>
<pre class="highlight">
AuthorizationManager.config("FacebookOAuth", OAuth2AuthorizationConfiguration.class)
        .setBaseURL(new URL("https://"))
        .setClientId("<replace me>")
        .setClientSecret("<replace me>")
        .setAuthzEndpoint("www.facebook.com/dialog/oauth")
        .setAccessTokenEndpoint("graph.facebook.com/oauth/access_token")
        .setAccountId("facebook-token")
        .setRedirectURL("https://localhost/")
        .setRefreshEndpoint("graph.facebook.com/oauth/access_token")
        .addAdditionalAccessParam(Pair.create("response_type", "code"))
        .setScopes(Arrays.asList("photo_upload, publish_actions"))
        .asModule();
</pre>
</div>

<div id="google" class="snippet-oauth2" style="display: none">
</br>
<a href="https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/java/org/jboss/aerogear/android/cookbook/shootandshare/util/GooglePlusHelper.java">Copy & paste</a>
<pre class="highlight">

AuthorizationManager.config("GoogleDriveAuthz", OAuth2AuthorizationConfiguration.class)
        .setBaseURL(new URL("https://accounts.google.com"))
        .setClientId("<replace me>")
        .setClientSecret("<replace me>")
        .setAuthzEndpoint("/o/oauth2/auth")
        .setAccessTokenEndpoint("/o/oauth2/token")
        .setRefreshEndpoint("/o/oauth2/token")
        .setAccountId("google-token")
        .setRedirectURL("http://localhost")
        .setScopes(Arrays.asList("https://www.googleapis.com/auth/drive"))
        .addAdditionalAuthorizationParam(Pair.create("access_type", "offline"))
        .asModule();

</pre>
</div>
++++
+
Please make sure to use the proper `client ID` and `client secret` for your application.
+
. Create a model class
+
The Android library will automatically marshall the HTTP request payload from OAuth2 providers. For more detailed information, please visit the link:/docs/guides/aerogear-android/pipe[Android documentation].
+
[source,java]
.https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/java/org/jboss/aerogear/android/cookbook/shootandshare/model/PhotoHolder.java[PhotoHolder - copy & paste here]
----
public class PhotoHolder {

    @RecordId
    private String id = null;

    private String title, message;
    private File image;
    //getters and setters
}
----
+
. PipeManager configuration
+
Now you can configure the link:/docs/guides/aerogear-android/pipe[PipeManager] to make use of the `AuthorizationManager` previously initialised.
+
[source,java]
.https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/java/org/jboss/aerogear/android/cookbook/shootandshare/util/KeycloakHelper.java[Keycloak - copy & paste here]
----
PipeManager.config("kc-upload", RestfulPipeConfiguration.class).module(AuthorizationManager.getModule("KeyCloakAuthz"))
        .withUrl(new URL("http://localhost:8080/shoot/rest/photos"))
        .requestBuilder(new MultipartRequestBuilder())
        .forClass(PhotoHolder.class);
----
+
[source,java]
.https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/java/org/jboss/aerogear/android/cookbook/shootandshare/util/FacebookHelper.java[Facebook - copy & paste]
----
PipeManager.config("fb-upload", RestfulPipeConfiguration.class).module(AuthorizationManager.getModule("FacebookOAuth"))
        .withUrl(new URL("https://graph.facebook.com/me/photos"))
        .requestBuilder( new MultipartRequestBuilder())
        .forClass(PhotoHolder.class);
----
+
[source,java]
.https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/java/org/jboss/aerogear/android/cookbook/shootandshare/util/GooglePlusHelper.java[Google - copy & paste]
----
PipeManager.config("gp-upload", RestfulPipeConfiguration.class)
        .module(AuthorizationManager.getModule(GoogleDriveAuthz))
        .withUrl(new URL("https://www.googleapis.com/upload/drive/v2/files?uploadType=multipart"))
        .requestBuilder(new GoogleDriveFileUploadRequestBuilder())
        .forClass(PhotoHolder.class);
----
+
Please make sure to use the proper `client ID` and `client secret` for your application.
+
. Access request
+
Finally, you need to request access to the OAuth2 provider. Make sure to create a new method for the helper class and inform the module name. The possible values are: `KeyCloakAuthz`, `FacebookOAuth` and `GoogleDriveAuthz`.
+
[source,java]
.https://github.com/aerogear/aerogear-android-cookbook/blob/master/ShootAndShare/app/src/main/java/org/jboss/aerogear/android/cookbook/shootandshare/util/KeycloakHelper.java[Requesting access - copy & paste here]
----
final AuthzModule authzModule = AuthorizationManager.getModule(<module name>);

authzModule.requestAccess(activity, new Callback<String>() {
    @Override
    public void onSuccess(String s) {
        callback.onSuccess(s);
    }

    @Override
    public void onFailure(Exception e) {
        if (!e.getMessage().matches(OAuthWebViewDialog.OAuthReceiver.DISMISS_ERROR)) {
            authzModule.deleteAccount();
        }
        callback.onFailure(e);
    }
});
----


=== Apache Cordova
=== iOS
=== Windows Phone
== Next steps
== Asking for help
== Acknowledgments


